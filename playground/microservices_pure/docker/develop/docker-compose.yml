version: '3.7'

services:
  # Infra
  audit-mysql:
    image: mysql:8
    container_name: audit-mysql
    hostname: audit-mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-mode=
    env_file:
      - .env
    volumes:
      - '${VOLUME_FOLDER}/audit/mysql:/var/lib/mysql'
    restart: unless-stopped
    ports:
      - '${AUDIT_DB_PORT}:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${AUDIT_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${AUDIT_DB_NAME}
      MYSQL_USER: ${AUDIT_DB_USERNAME}
      MYSQL_PASSWORD: ${AUDIT_DB_PASSWORD}
    networks:
      - service-mesh-dev

  warehouse-zoo:
    image: zookeeper:3.4.9
    hostname: warehouse-zoo
    container_name: warehouse-zoo
    restart: unless-stopped
    ports:
      - "${ZOO_KEEPER_PORT}:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=warehouse-zoo:2888:3888
    volumes:
      - '${VOLUME_FOLDER}/zoo/data:/data'
      - '${VOLUME_FOLDER}/zoo/datalog:/datalog'
    networks:
      - service-mesh-dev

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka
    container_name: kafka
    restart: unless-stopped
    ports:
      - "${KAFKA_PORT}:9092"
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093, EXTERNAL://kafka:9092
      KAFKA_LISTENERS: INTERNAL://:9093,EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: warehouse-zoo:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - '${VOLUME_FOLDER}/kafka:/var/lib/kafka/data'
    depends_on:
      - warehouse-zoo
    networks:
      - service-mesh-dev

  warehouse-kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - '${KAFKA_UI_PORT}:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: warehouse
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_ZOOKEEPER: warehouse-zoo:2181
    depends_on:
      - kafka
      - warehouse-schema-registry
    networks:
      - service-mesh-dev

  warehouse-schema-registry:
    image: confluentinc/cp-schema-registry:6.0.1
    hostname: warehouse-schema-registry
    container_name: warehouse-schema-registry
    restart: on-failure
    environment:
      SCHEMA_REGISTRY_HOST_NAME: warehouse-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9093 # Kafka Broker
    depends_on:
      - warehouse-zoo
      - kafka
    ports:
      - '${SCHEMA_REGISTRY_PORT}:8081'
    networks:
      - service-mesh-dev

  # observability service
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped

  # main services
  app-interceptor:
    build:
      context: ../..
      dockerfile: service/interceptor/.Dockerfile
    command:
      - server
    pid: "host"
    ports:
      - "8090:8090"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    environment:
      LOGGER_LEVEL: debug
      HTTP_PORT: 8090
      MYSQL_HOST: localhost
      MYSQL_PORT: 3320
      MYSQL_DBNAME: dbname
      MYSQL_USERNAME: username
      MYSQL_PASSWORD: password

      KAFKA_BROKER: localhost:9092
      KAFKA_TOPIC: warehouse

      INTERCEPTOR_ADDRESS: app-interceptor:8090
      AUDIT_ADDRESS: app-audit-service:8091
      WAREHOUSE_ADDRESS: http://app-warehouse:8092
      CUSTOMER_ADDRESS: http://app-customer:8093
    volumes:
      - /proc:/host/proc
    networks:
      - service-mesh-dev

  app-audit-service:
    build:
      context: ../..
      dockerfile: service/auditservice/.Dockerfile
    command:
      - server
    pid: "host"
    ports:
      - "8091:8091"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    environment:
      LOGGER_LEVEL: debug
      GRPC_PORT: 8091
      MYSQL_HOST: audit-mysql
      MYSQL_PORT: 3306
      MYSQL_DBNAME: dbname
      MYSQL_USERNAME: username
      MYSQL_PASSWORD: password

      KAFKA_BROKER: localhost:9092
      KAFKA_TOPIC: warehouse

      MIGRATION_FOLDER: /app/migration

      INTERCEPTOR_ADDRESS: app-interceptor:8090
      AUDIT_ADDRESS: app-audit-service:8091
      WAREHOUSE_ADDRESS: http://app-warehouse:8092
      CUSTOMER_ADDRESS: http://app-customer:8093
    volumes:
      - /proc:/host/proc
      - ../../service/auditservice/migration:/app/migration
    networks:
      - service-mesh-dev

  app-warehouse:
    depends_on:
      - kafka
    build:
      context: ../..
      dockerfile: service/warehouse/.Dockerfile
    command:
      - server
    pid: "host"
    ports:
      - "8092:8092"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    environment:
      LOGGER_LEVEL: debug
      HTTP_PORT: 8092
      MYSQL_HOST: localhost
      MYSQL_PORT: 3320
      MYSQL_DBNAME: dbname
      MYSQL_USERNAME: username
      MYSQL_PASSWORD: password

      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: warehouse

      INTERCEPTOR_ADDRESS: app-interceptor:8090
      AUDIT_ADDRESS: app-audit-service:8091
      WAREHOUSE_ADDRESS: http://app-warehouse:8092
      CUSTOMER_ADDRESS: http://app-customer:8093
    volumes:
      - /proc:/host/proc
    networks:
      - service-mesh-dev

  app-customer:
    build:
      context: ../..
      dockerfile: service/customer/.Dockerfile
    command:
      - server
    pid: "host"
    ports:
      - "8093:8093"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    environment:
      LOGGER_LEVEL: debug
      HTTP_PORT: 8093
      MYSQL_HOST: localhost
      MYSQL_PORT: 3320
      MYSQL_DBNAME: dbname
      MYSQL_USERNAME: username
      MYSQL_PASSWORD: password

      KAFKA_BROKER: localhost:9092
      KAFKA_TOPIC: warehouse

      INTERCEPTOR_ADDRESS: app-interceptor:8090
      AUDIT_ADDRESS: app-audit-service:8091
      WAREHOUSE_ADDRESS: http://app-warehouse:8092
      CUSTOMER_ADDRESS: http://app-customer:8093
    volumes:
      - /proc:/host/proc
    networks:
      - service-mesh-dev

  # tracing service
  go-auto-interceptor:
    depends_on:
      - jaeger
      - app-interceptor
    build:
      context: ../../../..
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    privileged: true
    pid: "host"
    environment:
      - REDIS_ADDRESS=shared-redis:6379
      - REDIS_PASSWORD=
      - QUEUE_DELAY_DURATION=100ms
      - QUEUE_MAX_SIZE=50000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_GO_AUTO_TARGET_EXE=/app/interceptor
      - OTEL_GO_AUTO_INCLUDE_DB_STATEMENT=true
      - OTEL_SERVICE_NAME=interceptor
      - OTEL_PROPAGATORS=tracecontext,baggage
      - CGO_ENABLED=1
    volumes:
      - /proc:/host/proc

  go-auto-audit-service:
    depends_on:
      - jaeger
      - app-audit-service
    build:
      context: ../../../..
      dockerfile: Dockerfile
    privileged: true
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    pid: "host"
    environment:
      - REDIS_ADDRESS=shared-redis:6379
      - REDIS_PASSWORD=
      - QUEUE_DELAY_DURATION=100ms
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_GO_AUTO_TARGET_EXE=/app/audit
      - OTEL_GO_AUTO_INCLUDE_DB_STATEMENT=true
      - OTEL_SERVICE_NAME=audit-service
      - OTEL_PROPAGATORS=tracecontext,baggage
      - CGO_ENABLED=1
    volumes:
      - /proc:/host/proc

  go-auto-warehouse:
    depends_on:
      - jaeger
      - app-warehouse
    build:
      context: ../../../..
      dockerfile: Dockerfile
    privileged: true
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    pid: "host"
    environment:
      - REDIS_ADDRESS=shared-redis:6379
      - REDIS_PASSWORD=
      - QUEUE_DELAY_DURATION=100ms
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_GO_AUTO_TARGET_EXE=/app/warehouse
      - OTEL_GO_AUTO_INCLUDE_DB_STATEMENT=true
      - OTEL_SERVICE_NAME=warehouse
      - OTEL_PROPAGATORS=tracecontext,baggage
      - CGO_ENABLED=1
    volumes:
      - /proc:/host/proc

  go-auto-customer:
    depends_on:
      - jaeger
      - app-customer
    build:
      context: ../../../..
      dockerfile: Dockerfile
    privileged: true
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    pid: "host"
    environment:
      - REDIS_ADDRESS=localhost:6379
      - REDIS_PASSWORD=
      - QUEUE_DELAY_DURATION=100ms
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_GO_AUTO_TARGET_EXE=/app/customer
      - OTEL_GO_AUTO_INCLUDE_DB_STATEMENT=true
      - OTEL_SERVICE_NAME=customer
      - OTEL_PROPAGATORS=tracecontext,baggage
      - CGO_ENABLED=1
    volumes:
      - /proc:/host/proc

networks:
  service-mesh-dev:
    driver: bridge